//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Loadouts = newLoadoutsTable("public", "loadouts", "")

type loadoutsTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	Title          postgres.ColumnString
	Source         postgres.ColumnString
	SourceURL      postgres.ColumnString
	WeaponName     postgres.ColumnString
	WeaponCategory postgres.ColumnString
	CreatedBy      postgres.ColumnString
	GameID         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LoadoutsTable struct {
	loadoutsTable

	EXCLUDED loadoutsTable
}

// AS creates new LoadoutsTable with assigned alias
func (a LoadoutsTable) AS(alias string) *LoadoutsTable {
	return newLoadoutsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoadoutsTable with assigned schema name
func (a LoadoutsTable) FromSchema(schemaName string) *LoadoutsTable {
	return newLoadoutsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoadoutsTable with assigned table prefix
func (a LoadoutsTable) WithPrefix(prefix string) *LoadoutsTable {
	return newLoadoutsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoadoutsTable with assigned table suffix
func (a LoadoutsTable) WithSuffix(suffix string) *LoadoutsTable {
	return newLoadoutsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoadoutsTable(schemaName, tableName, alias string) *LoadoutsTable {
	return &LoadoutsTable{
		loadoutsTable: newLoadoutsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newLoadoutsTableImpl("", "excluded", ""),
	}
}

func newLoadoutsTableImpl(schemaName, tableName, alias string) loadoutsTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		TitleColumn          = postgres.StringColumn("title")
		SourceColumn         = postgres.StringColumn("source")
		SourceURLColumn      = postgres.StringColumn("source_url")
		WeaponNameColumn     = postgres.StringColumn("weapon_name")
		WeaponCategoryColumn = postgres.StringColumn("weapon_category")
		CreatedByColumn      = postgres.StringColumn("created_by")
		GameIDColumn         = postgres.StringColumn("game_id")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TitleColumn, SourceColumn, SourceURLColumn, WeaponNameColumn, WeaponCategoryColumn, CreatedByColumn, GameIDColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, TitleColumn, SourceColumn, SourceURLColumn, WeaponNameColumn, WeaponCategoryColumn, CreatedByColumn, GameIDColumn}
	)

	return loadoutsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Title:          TitleColumn,
		Source:         SourceColumn,
		SourceURL:      SourceURLColumn,
		WeaponName:     WeaponNameColumn,
		WeaponCategory: WeaponCategoryColumn,
		CreatedBy:      CreatedByColumn,
		GameID:         GameIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
