//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Attachments = newAttachmentsTable("public", "attachments", "")

type attachmentsTable struct {
	postgres.Table

	// Columns
	Name     postgres.ColumnString
	Category postgres.ColumnString
	ID       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AttachmentsTable struct {
	attachmentsTable

	EXCLUDED attachmentsTable
}

// AS creates new AttachmentsTable with assigned alias
func (a AttachmentsTable) AS(alias string) *AttachmentsTable {
	return newAttachmentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AttachmentsTable with assigned schema name
func (a AttachmentsTable) FromSchema(schemaName string) *AttachmentsTable {
	return newAttachmentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AttachmentsTable with assigned table prefix
func (a AttachmentsTable) WithPrefix(prefix string) *AttachmentsTable {
	return newAttachmentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AttachmentsTable with assigned table suffix
func (a AttachmentsTable) WithSuffix(suffix string) *AttachmentsTable {
	return newAttachmentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAttachmentsTable(schemaName, tableName, alias string) *AttachmentsTable {
	return &AttachmentsTable{
		attachmentsTable: newAttachmentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newAttachmentsTableImpl("", "excluded", ""),
	}
}

func newAttachmentsTableImpl(schemaName, tableName, alias string) attachmentsTable {
	var (
		NameColumn     = postgres.StringColumn("name")
		CategoryColumn = postgres.StringColumn("category")
		IDColumn       = postgres.StringColumn("id")
		allColumns     = postgres.ColumnList{NameColumn, CategoryColumn, IDColumn}
		mutableColumns = postgres.ColumnList{NameColumn, CategoryColumn}
	)

	return attachmentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Name:     NameColumn,
		Category: CategoryColumn,
		ID:       IDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
