//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LoadoutAttachment = newLoadoutAttachmentTable("public", "loadout_attachment", "")

type loadoutAttachmentTable struct {
	postgres.Table

	// Columns
	LoadoutID    postgres.ColumnString
	AttachmentID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LoadoutAttachmentTable struct {
	loadoutAttachmentTable

	EXCLUDED loadoutAttachmentTable
}

// AS creates new LoadoutAttachmentTable with assigned alias
func (a LoadoutAttachmentTable) AS(alias string) *LoadoutAttachmentTable {
	return newLoadoutAttachmentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoadoutAttachmentTable with assigned schema name
func (a LoadoutAttachmentTable) FromSchema(schemaName string) *LoadoutAttachmentTable {
	return newLoadoutAttachmentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoadoutAttachmentTable with assigned table prefix
func (a LoadoutAttachmentTable) WithPrefix(prefix string) *LoadoutAttachmentTable {
	return newLoadoutAttachmentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoadoutAttachmentTable with assigned table suffix
func (a LoadoutAttachmentTable) WithSuffix(suffix string) *LoadoutAttachmentTable {
	return newLoadoutAttachmentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoadoutAttachmentTable(schemaName, tableName, alias string) *LoadoutAttachmentTable {
	return &LoadoutAttachmentTable{
		loadoutAttachmentTable: newLoadoutAttachmentTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newLoadoutAttachmentTableImpl("", "excluded", ""),
	}
}

func newLoadoutAttachmentTableImpl(schemaName, tableName, alias string) loadoutAttachmentTable {
	var (
		LoadoutIDColumn    = postgres.StringColumn("loadout_id")
		AttachmentIDColumn = postgres.StringColumn("attachment_id")
		allColumns         = postgres.ColumnList{LoadoutIDColumn, AttachmentIDColumn}
		mutableColumns     = postgres.ColumnList{}
	)

	return loadoutAttachmentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		LoadoutID:    LoadoutIDColumn,
		AttachmentID: AttachmentIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
